import { ref } from 'vue'
import type { GeolocationData } from '@/composables/useIpGeolocation'

export interface ShareOptions {
  includeMap?: boolean
  includeCoordinates?: boolean
  customMessage?: string
}

export function useShare() {
  const sharing = ref(false)
  const error = ref<string | null>(null)

  function generateShareText(data: GeolocationData, options: ShareOptions = {}): string {
    const { includeCoordinates = true, customMessage = '' } = options

    const baseText = customMessage || `üåç IP Location Report for ${data.ip}`

    const locationInfo = [
      `üìç Location: ${data.city}, ${data.region}, ${data.country_name}`,
      `üè¢ ISP: ${data.org}`,
      `üïê Timezone: ${data.timezone}`,
      ...(includeCoordinates ? [`üìå Coordinates: ${data.latitude}, ${data.longitude}`] : []),
    ]

    return [baseText, '', ...locationInfo, '', 'üîó Generated by IP Tracker'].join('\n')
  }

  function generateShareURL(data: GeolocationData): string {
    const baseURL = window.location.origin + window.location.pathname
    const params = new URLSearchParams({
      ip: data.ip,
      city: data.city,
      country: data.country_code,
      lat: data.latitude.toString(),
      lon: data.longitude.toString(),
    })

    return `${baseURL}?${params.toString()}`
  }

  async function shareViaClipboard(
    data: GeolocationData,
    options: ShareOptions = {},
  ): Promise<boolean> {
    try {
      sharing.value = true
      error.value = null

      const shareText = generateShareText(data, options)
      const shareURL = generateShareURL(data)

      const fullText = `${shareText}\n\n${shareURL}`

      await navigator.clipboard.writeText(fullText)
      return true
    } catch (err) {
      error.value = 'Failed to copy to clipboard'
      console.error('Clipboard share error:', err)
      return false
    } finally {
      sharing.value = false
    }
  }

  async function shareViaNativeAPI(
    data: GeolocationData,
    options: ShareOptions = {},
  ): Promise<boolean> {
    try {
      sharing.value = true
      error.value = null

      if (!navigator.share) {
        throw new Error('Native sharing not supported')
      }

      const shareText = generateShareText(data, options)
      const shareURL = generateShareURL(data)

      await navigator.share({
        title: `IP Location Report - ${data.ip}`,
        text: shareText,
        url: shareURL,
      })

      return true
    } catch (err) {
      if ((err as Error).name === 'AbortError') {
        // User cancelled sharing
        return false
      }
      error.value = 'Failed to share'
      console.error('Native share error:', err)
      return false
    } finally {
      sharing.value = false
    }
  }

  function shareViaTwitter(data: GeolocationData, options: ShareOptions = {}): void {
    try {
      sharing.value = true
      error.value = null

      const shareText = generateShareText(data, {
        ...options,
        customMessage: options.customMessage || `üåç Just tracked IP ${data.ip}!`,
      })

      const tweetText = encodeURIComponent(shareText.substring(0, 240)) // Twitter character limit
      const shareURL = encodeURIComponent(generateShareURL(data))

      const twitterURL = `https://twitter.com/intent/tweet?text=${tweetText}&url=${shareURL}`

      window.open(twitterURL, '_blank', 'width=600,height=400')
    } catch (err) {
      error.value = 'Failed to share on Twitter'
      console.error('Twitter share error:', err)
    } finally {
      sharing.value = false
    }
  }

  function shareViaLinkedIn(data: GeolocationData): void {
    try {
      sharing.value = true
      error.value = null

      const shareURL = encodeURIComponent(generateShareURL(data))
      const title = encodeURIComponent(`IP Location Report - ${data.ip}`)
      const summary = encodeURIComponent(
        `Tracked IP ${data.ip} to ${data.city}, ${data.country_name}. ISP: ${data.org}`,
      )

      const linkedInURL = `https://www.linkedin.com/sharing/share-offsite/?url=${shareURL}&title=${title}&summary=${summary}`

      window.open(linkedInURL, '_blank', 'width=600,height=400')
    } catch (err) {
      error.value = 'Failed to share on LinkedIn'
      console.error('LinkedIn share error:', err)
    } finally {
      sharing.value = false
    }
  }

  function shareViaEmail(data: GeolocationData, options: ShareOptions = {}): void {
    try {
      sharing.value = true
      error.value = null

      const shareText = generateShareText(data, options)
      const shareURL = generateShareURL(data)

      const subject = encodeURIComponent(`IP Location Report - ${data.ip}`)
      const body = encodeURIComponent(`${shareText}\n\nView details: ${shareURL}`)

      const emailURL = `mailto:?subject=${subject}&body=${body}`

      window.location.href = emailURL
    } catch (err) {
      error.value = 'Failed to share via email'
      console.error('Email share error:', err)
    } finally {
      sharing.value = false
    }
  }

  function shareToWhatsApp(data: GeolocationData, options: ShareOptions = {}): void {
    try {
      sharing.value = true
      error.value = null

      const shareText = generateShareText(data, {
        ...options,
        customMessage: options.customMessage || `üåç IP Location Info for ${data.ip}`,
      })
      const shareURL = generateShareURL(data)

      const whatsappText = encodeURIComponent(`${shareText}\n\n${shareURL}`)
      const whatsappURL = `https://wa.me/?text=${whatsappText}`

      window.open(whatsappURL, '_blank')
    } catch (err) {
      error.value = 'Failed to share on WhatsApp'
      console.error('WhatsApp share error:', err)
    } finally {
      sharing.value = false
    }
  }

  function copyShareLink(data: GeolocationData): Promise<boolean> {
    return shareViaClipboard(data, {
      customMessage: `üîó IP Tracker Link for ${data.ip}`,
      includeCoordinates: false,
    })
  }

  async function shareToSocialMedia(
    platform: 'twitter' | 'linkedin' | 'whatsapp' | 'email' | 'native' | 'clipboard',
    data: GeolocationData,
    options: ShareOptions = {},
  ): Promise<boolean> {
    switch (platform) {
      case 'twitter':
        shareViaTwitter(data, options)
        return true
      case 'linkedin':
        shareViaLinkedIn(data)
        return true
      case 'whatsapp':
        shareToWhatsApp(data, options)
        return true
      case 'email':
        shareViaEmail(data, options)
        return true
      case 'native':
        return await shareViaNativeAPI(data, options)
      case 'clipboard':
        return await shareViaClipboard(data, options)
      default:
        error.value = 'Unsupported sharing platform'
        return false
    }
  }

  return {
    sharing,
    error,
    generateShareText,
    generateShareURL,
    shareToSocialMedia,
    copyShareLink,
    shareViaClipboard,
    shareViaNativeAPI,
    shareViaTwitter,
    shareViaLinkedIn,
    shareViaEmail,
    shareToWhatsApp,
  }
}
